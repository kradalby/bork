package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/kradalby/bork/models"
	"github.com/pkg/errors"
	"log"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Namespace)
// DB Table: Plural (namespaces)
// Resource: Plural (Namespaces)
// Path: Plural (/namespaces)
// View Template Folder: Plural (/templates/namespaces/)

// NamespacesResource is the resource for the Namespace model
type NamespacesResource struct {
	buffalo.Resource
}

// List gets all Namespaces. This function is mapped to the path
// GET /namespaces
func (v NamespacesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	namespaces := &models.Namespaces{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.Eager().PaginateFromParams(c.Params())

	// Retrieve all Namespaces from the DB
	if err := q.All(namespaces); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, namespaces))
}

// Show gets the data for one Namespace. This function is mapped to
// the path GET /namespaces/{namespace_id}
func (v NamespacesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Eager().Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, namespace))
}

// New renders the form for creating a new Namespace.
// This function is mapped to the path GET /namespaces/new
func (v NamespacesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Namespace{}))
}

// Create adds a Namespace to the DB. This function is mapped to the
// path POST /namespaces
func (v NamespacesResource) Create(c buffalo.Context) error {
	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// Bind namespace to the html form elements
	if err := c.Bind(namespace); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	// tx, ok := c.Value("tx").(*pop.Connection)
	// if !ok {
	// 	return errors.WithStack(errors.New("no transaction found"))
	// }

	// // Validate the data from the html form
	// verrs, err := tx.ValidateAndCreate(namespace)
	// if err != nil {
	// 	return errors.WithStack(err)
	// }

	// if verrs.HasAny() {
	// 	// Make the errors available inside the html template
	// 	c.Set("errors", verrs)

	// 	// Render again the new.html template that the user can
	// 	// correct the input.
	// 	return c.Render(422, r.Auto(c, namespace))
	// }

	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	err = kubeClient.CreateNamespace(namespace.Name, namespace.Owner.ID)
	if err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Namespace was created successfully")

	// and redirect to the namespaces index page
	return c.Render(201, r.Auto(c, namespace))
}

// Edit renders a edit form for a Namespace. This function is
// mapped to the path GET /namespaces/{namespace_id}/edit
func (v NamespacesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, namespace))
}

// Update changes a Namespace in the DB. This function is mapped to
// the path PUT /namespaces/{namespace_id}
func (v NamespacesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Namespace to the html form elements
	if err := c.Bind(namespace); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(namespace)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, namespace))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Namespace was updated successfully")

	// and redirect to the namespaces index page
	return c.Render(200, r.Auto(c, namespace))
}

// Destroy deletes a Namespace from the DB. This function is mapped
// to the path DELETE /namespaces/{namespace_id}
func (v NamespacesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(namespace); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Namespace was destroyed successfully")

	// Redirect to the namespaces index page
	return c.Render(200, r.Auto(c, namespace))
}

// Custom extension to Resource

func NamespaceToken(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	token, err := kubeClient.GetToken(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	return c.Render(200, r.JSON(map[string]string{"token": token}))
}

func NamespaceCertificate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	cert, err := kubeClient.GetCertificate(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	return c.Render(200, r.JSON(map[string]string{"certificate": cert}))
}

func NamespaceCertificateB64(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	cert, err := kubeClient.GetCertificateB64(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	return c.Render(200, r.JSON(map[string]string{"certificate_b64": cert}))
}

func NamespaceEndpoint(c buffalo.Context) error {
	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	endpoint := kubeClient.GetEndpoint()

	return c.Render(200, r.JSON(map[string]string{"endpoint": endpoint}))
}

func NamespaceAuth(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Namespace
	namespace := &models.Namespace{}

	// To find the Namespace the parameter namespace_id is used.
	if err := tx.Find(namespace, c.Param("namespace_id")); err != nil {
		return c.Error(404, err)
	}

	log.Println(namespace.Name)

	kubeClient, err := getKubernetesClient()
	if err != nil {
		return c.Error(500, err)
	}

	token, err := kubeClient.GetToken(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	cert, err := kubeClient.GetCertificate(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	cert64, err := kubeClient.GetCertificateB64(namespace.Name)
	if err != nil {
		return c.Error(500, err)
	}

	endpoint := kubeClient.GetEndpoint()

	return c.Render(200, r.JSON(map[string]string{
		"token":           token,
		"certificate":     cert,
		"certificate_b64": cert64,
		"endpoint":        endpoint,
	}))
}
